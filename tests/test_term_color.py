# Generated by CodiumAI
from api.term_color import style

"""
Code Analysis

Objective:
The objective of this code snippet is to define a set of color and style options for text output in the terminal, and provide functions to apply these options to text strings.

Inputs:
- Strings representing the desired color and style options for the text output.
- Optional list of style options to apply to the text.

Flow:
- Define the Color and Style enums, which provide a set of options for text color and style.
- Define the parse_style function, which takes a string representing a style option and returns the corresponding integer value.
- Define the style function, which takes a text string, a color string, and an optional list of style strings, and applies the specified color and style options to the text.
- Define functions for each color option (black, red, green, etc.), which call the style function with the appropriate color string.

Outputs:
- A formatted string with the specified color and style options applied to the input text.

Additional aspects:
- The code uses ANSI escape codes to apply the color and style options to the text output.
- The code includes error handling for invalid color and style options.
"""


class TestCodeSnippet:
    # Tests that style() returns the expected output with valid input
    def test_style_valid_input(self):
        assert style("test", "BLACK", ["BOLD"]) == "\x1b[1;30mtest\x1b[0m"
        assert style("test", "RED", ["DIM"]) == "\x1b[2;31mtest\x1b[0m"
        assert style("test", "GREEN", ["ITALIC"]) == "\x1b[3;32mtest\x1b[0m"
        assert style("test", "YELLOW", ["UNDERLINED"]) == "\x1b[4;33mtest\x1b[0m"
        assert style("test", "BLUE") == "\x1b[34mtest\x1b[0m"
        assert style("test", "MAGENTA") == "\x1b[35mtest\x1b[0m"
        assert style("test", "CYAN") == "\x1b[36mtest\x1b[0m"
        assert style("test", "WHITE") == "\x1b[97mtest\x1b[0m"
