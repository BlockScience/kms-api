export const parser = // Generated by Peggy 3.0.2.
  //
  // https://peggyjs.org/
  (function () {
    'use strict'

    function peg$subclass(child, parent) {
      function C() {
        this.constructor = child
      }
      C.prototype = parent.prototype
      child.prototype = new C()
    }

    function peg$SyntaxError(message, expected, found, location) {
      var self = Error.call(this, message)
      // istanbul ignore next Check is a necessary evil to support older environments
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self, peg$SyntaxError.prototype)
      }
      self.expected = expected
      self.found = found
      self.location = location
      self.name = 'SyntaxError'
      return self
    }

    peg$subclass(peg$SyntaxError, Error)

    function peg$padEnd(str, targetLength, padString) {
      padString = padString || ' '
      if (str.length > targetLength) {
        return str
      }
      targetLength -= str.length
      padString += padString.repeat(targetLength)
      return str + padString.slice(0, targetLength)
    }

    peg$SyntaxError.prototype.format = function (sources) {
      var str = 'Error: ' + this.message
      if (this.location) {
        var src = null
        var k
        for (k = 0; k < sources.length; k++) {
          if (sources[k].source === this.location.source) {
            src = sources[k].text.split(/\r\n|\n|\r/g)
            break
          }
        }
        var s = this.location.start
        var offset_s =
          this.location.source && typeof this.location.source.offset === 'function'
            ? this.location.source.offset(s)
            : s
        var loc = this.location.source + ':' + offset_s.line + ':' + offset_s.column
        if (src) {
          var e = this.location.end
          var filler = peg$padEnd('', offset_s.line.toString().length, ' ')
          var line = src[s.line - 1]
          var last = s.line === e.line ? e.column : line.length + 1
          var hatLen = last - s.column || 1
          str +=
            '\n --> ' +
            loc +
            '\n' +
            filler +
            ' |\n' +
            offset_s.line +
            ' | ' +
            line +
            '\n' +
            filler +
            ' | ' +
            peg$padEnd('', s.column - 1, ' ') +
            peg$padEnd('', hatLen, '^')
        } else {
          str += '\n at ' + loc
        }
      }
      return str
    }

    peg$SyntaxError.buildMessage = function (expected, found) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
          return '"' + literalEscape(expectation.text) + '"'
        },

        class: function (expectation) {
          var escapedParts = expectation.parts.map(function (part) {
            return Array.isArray(part)
              ? classEscape(part[0]) + '-' + classEscape(part[1])
              : classEscape(part)
          })

          return '[' + (expectation.inverted ? '^' : '') + escapedParts.join('') + ']'
        },

        any: function () {
          return 'any character'
        },

        end: function () {
          return 'end of input'
        },

        other: function (expectation) {
          return expectation.description
        },
      }

      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase()
      }

      function literalEscape(s) {
        return s
          .replace(/\\/g, '\\\\')
          .replace(/"/g, '\\"')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g, function (ch) {
            return '\\x0' + hex(ch)
          })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
            return '\\x' + hex(ch)
          })
      }

      function classEscape(s) {
        return s
          .replace(/\\/g, '\\\\')
          .replace(/\]/g, '\\]')
          .replace(/\^/g, '\\^')
          .replace(/-/g, '\\-')
          .replace(/\0/g, '\\0')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x0F]/g, function (ch) {
            return '\\x0' + hex(ch)
          })
          .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
            return '\\x' + hex(ch)
          })
      }

      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
      }

      function describeExpected(expected) {
        var descriptions = expected.map(describeExpectation)
        var i, j

        descriptions.sort()

        if (descriptions.length > 0) {
          for (i = 1, j = 1; i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i]
              j++
            }
          }
          descriptions.length = j
        }

        switch (descriptions.length) {
          case 1:
            return descriptions[0]

          case 2:
            return descriptions[0] + ' or ' + descriptions[1]

          default:
            return (
              descriptions.slice(0, -1).join(', ') + ', or ' + descriptions[descriptions.length - 1]
            )
        }
      }

      function describeFound(found) {
        return found ? '"' + literalEscape(found) + '"' : 'end of input'
      }

      return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.'
    }

    function peg$parse(input, options) {
      options = options !== undefined ? options : {}

      var peg$FAILED = {}
      var peg$source = options.grammarSource

      var peg$startRuleFunctions = { FilterBy: peg$parseFilterBy }
      var peg$startRuleFunction = peg$parseFilterBy

      var peg$c0 = '|'
      var peg$c1 = '&'
      var peg$c2 = '('
      var peg$c3 = ')'
      var peg$c4 = 'url'
      var peg$c5 = 'title'
      var peg$c6 = 'text'
      var peg$c7 = 'platform'
      var peg$c8 = 'type'
      var peg$c9 = 'tags'
      var peg$c10 = 'rank'
      var peg$c11 = 'measure_text_length'
      var peg$c12 = ':'
      var peg$c13 = '<'
      var peg$c14 = '>'
      var peg$c15 = '<='
      var peg$c16 = '>='
      var peg$c17 = '='
      var peg$c18 = '['
      var peg$c19 = '..'
      var peg$c20 = ']'
      var peg$c21 = ','

      var peg$r0 = /^[0-9]/
      var peg$r1 = /^[a-zA-Z_\-]/
      var peg$r2 = /^[ \t\n\r]/

      var peg$e0 = peg$literalExpectation('|', false)
      var peg$e1 = peg$literalExpectation('&', false)
      var peg$e2 = peg$literalExpectation('(', false)
      var peg$e3 = peg$literalExpectation(')', false)
      var peg$e4 = peg$literalExpectation('url', false)
      var peg$e5 = peg$literalExpectation('title', false)
      var peg$e6 = peg$literalExpectation('text', false)
      var peg$e7 = peg$literalExpectation('platform', false)
      var peg$e8 = peg$literalExpectation('type', false)
      var peg$e9 = peg$literalExpectation('tags', false)
      var peg$e10 = peg$literalExpectation('rank', false)
      var peg$e11 = peg$literalExpectation('measure_text_length', false)
      var peg$e12 = peg$literalExpectation(':', false)
      var peg$e13 = peg$literalExpectation('<', false)
      var peg$e14 = peg$literalExpectation('>', false)
      var peg$e15 = peg$literalExpectation('<=', false)
      var peg$e16 = peg$literalExpectation('>=', false)
      var peg$e17 = peg$literalExpectation('=', false)
      var peg$e18 = peg$otherExpectation('[min..max]')
      var peg$e19 = peg$literalExpectation('[', false)
      var peg$e20 = peg$literalExpectation('..', false)
      var peg$e21 = peg$literalExpectation(']', false)
      var peg$e22 = peg$literalExpectation(',', false)
      var peg$e23 = peg$classExpectation([['0', '9']], false, false)
      var peg$e24 = peg$classExpectation([['a', 'z'], ['A', 'Z'], '_', '-'], false, false)
      var peg$e25 = peg$otherExpectation('whitespace')
      var peg$e26 = peg$classExpectation([' ', '\t', '\n', '\r'], false, false)

      var peg$f0 = function (head, tail) {
        return tail.reduce(function (result, element) {
          return { operator: '||', operands: [result, element[3]] }
        }, head)
      }
      var peg$f1 = function (head, tail) {
        return tail.reduce(function (result, element) {
          return { operator: '&&', operands: [result, element[3]] }
        }, head)
      }
      var peg$f2 = function (condition) {
        return condition
      }
      var peg$f3 = function (name, value) {
        return { field: name, value }
      }
      var peg$f4 = function (name, value) {
        return { field: name, value: Array.isArray(value) ? value : [value] }
      }
      var peg$f5 = function (name, value) {
        return { field: name, value }
      }
      var peg$f6 = function (operator, number) {
        return { type: 'number', operator, value: Number(number.join('')) }
      }
      var peg$f7 = function (operator, value) {
        return {
          type: 'equality',
          operator,
          value: Array.isArray(value) ? value : [value.join('')],
        }
      }
      var peg$f8 = function (min, max) {
        return { type: 'number', range: { min: Number(min.join('')), max: Number(max.join('')) } }
      }
      var peg$f9 = function (head, tail) {
        const tails = tail.map((x) => x[3])
        const values = [head].concat(tails)
        return values
      }
      var peg$f10 = function (chars) {
        return chars.join('')
      }
      var peg$currPos = 0
      var peg$savedPos = 0
      var peg$posDetailsCache = [{ line: 1, column: 1 }]
      var peg$maxFailPos = 0
      var peg$maxFailExpected = []
      var peg$silentFails = 0

      var peg$result

      if ('startRule' in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error('Can\'t start parsing from rule "' + options.startRule + '".')
        }

        peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
      }

      function text() {
        return input.substring(peg$savedPos, peg$currPos)
      }

      function offset() {
        return peg$savedPos
      }

      function range() {
        return {
          source: peg$source,
          start: peg$savedPos,
          end: peg$currPos,
        }
      }

      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos)
      }

      function expected(description, location) {
        location =
          location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos)

        throw peg$buildStructuredError(
          [peg$otherExpectation(description)],
          input.substring(peg$savedPos, peg$currPos),
          location,
        )
      }

      function error(message, location) {
        location =
          location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos)

        throw peg$buildSimpleError(message, location)
      }

      function peg$literalExpectation(text, ignoreCase) {
        return { type: 'literal', text: text, ignoreCase: ignoreCase }
      }

      function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase }
      }

      function peg$anyExpectation() {
        return { type: 'any' }
      }

      function peg$endExpectation() {
        return { type: 'end' }
      }

      function peg$otherExpectation(description) {
        return { type: 'other', description: description }
      }

      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos]
        var p

        if (details) {
          return details
        } else {
          p = pos - 1
          while (!peg$posDetailsCache[p]) {
            p--
          }

          details = peg$posDetailsCache[p]
          details = {
            line: details.line,
            column: details.column,
          }

          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++
              details.column = 1
            } else {
              details.column++
            }

            p++
          }

          peg$posDetailsCache[pos] = details

          return details
        }
      }

      function peg$computeLocation(startPos, endPos, offset) {
        var startPosDetails = peg$computePosDetails(startPos)
        var endPosDetails = peg$computePosDetails(endPos)

        var res = {
          source: peg$source,
          start: {
            offset: startPos,
            line: startPosDetails.line,
            column: startPosDetails.column,
          },
          end: {
            offset: endPos,
            line: endPosDetails.line,
            column: endPosDetails.column,
          },
        }
        if (offset && peg$source && typeof peg$source.offset === 'function') {
          res.start = peg$source.offset(res.start)
          res.end = peg$source.offset(res.end)
        }
        return res
      }

      function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
          return
        }

        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos
          peg$maxFailExpected = []
        }

        peg$maxFailExpected.push(expected)
      }

      function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location)
      }

      function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(
          peg$SyntaxError.buildMessage(expected, found),
          expected,
          found,
          location,
        )
      }

      function peg$parseFilterBy() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8

        s0 = peg$currPos
        s1 = peg$parse_()
        s2 = peg$parseCondition()
        if (s2 !== peg$FAILED) {
          s3 = []
          s4 = peg$currPos
          s5 = peg$parse_()
          if (input.charCodeAt(peg$currPos) === 124) {
            s6 = peg$c0
            peg$currPos++
          } else {
            s6 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e0)
            }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_()
            s8 = peg$parseCondition()
            if (s8 !== peg$FAILED) {
              s5 = [s5, s6, s7, s8]
              s4 = s5
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4)
            s4 = peg$currPos
            s5 = peg$parse_()
            if (input.charCodeAt(peg$currPos) === 124) {
              s6 = peg$c0
              peg$currPos++
            } else {
              s6 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e0)
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_()
              s8 = peg$parseCondition()
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8]
                s4 = s5
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          }
          s4 = peg$parse_()
          peg$savedPos = s0
          s0 = peg$f0(s2, s3)
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseCondition() {
        var s0, s1, s2, s3, s4, s5, s6, s7

        s0 = peg$currPos
        s1 = peg$parseSubCondition()
        if (s1 !== peg$FAILED) {
          s2 = []
          s3 = peg$currPos
          s4 = peg$parse_()
          if (input.charCodeAt(peg$currPos) === 38) {
            s5 = peg$c1
            peg$currPos++
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e1)
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_()
            s7 = peg$parseSubCondition()
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            s3 = peg$currPos
            s4 = peg$parse_()
            if (input.charCodeAt(peg$currPos) === 38) {
              s5 = peg$c1
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e1)
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_()
              s7 = peg$parseSubCondition()
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7]
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          }
          peg$savedPos = s0
          s0 = peg$f1(s1, s2)
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseSubCondition() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c2
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e2)
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          s3 = peg$parseFilterBy()
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c3
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e3)
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0
              s0 = peg$f2(s3)
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumberField()
          if (s0 === peg$FAILED) {
            s0 = peg$parseArrayField()
            if (s0 === peg$FAILED) {
              s0 = peg$parseStringField()
            }
          }
        }

        return s0
      }

      function peg$parseStringFields() {
        var s0

        if (input.substr(peg$currPos, 3) === peg$c4) {
          s0 = peg$c4
          peg$currPos += 3
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e4)
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c5) {
            s0 = peg$c5
            peg$currPos += 5
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e5)
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c6) {
              s0 = peg$c6
              peg$currPos += 4
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e6)
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c7) {
                s0 = peg$c7
                peg$currPos += 8
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$e7)
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c8) {
                  s0 = peg$c8
                  peg$currPos += 4
                } else {
                  s0 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e8)
                  }
                }
              }
            }
          }
        }

        return s0
      }

      function peg$parseArrayFields() {
        var s0

        if (input.substr(peg$currPos, 4) === peg$c9) {
          s0 = peg$c9
          peg$currPos += 4
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e9)
          }
        }

        return s0
      }

      function peg$parseNumberFields() {
        var s0

        if (input.substr(peg$currPos, 4) === peg$c10) {
          s0 = peg$c10
          peg$currPos += 4
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e10)
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 19) === peg$c11) {
            s0 = peg$c11
            peg$currPos += 19
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e11)
            }
          }
        }

        return s0
      }

      function peg$parseStringField() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        s1 = peg$parseStringFields()
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c12
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e12)
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            s5 = peg$parseEqualityOperator()
            if (s5 === peg$FAILED) {
              s5 = peg$parseIdentifier()
              if (s5 === peg$FAILED) {
                s5 = peg$parseList()
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0
              s0 = peg$f3(s1, s5)
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseArrayField() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        s1 = peg$parseArrayFields()
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c12
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e12)
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            s5 = peg$parseEqualityOperator()
            if (s5 === peg$FAILED) {
              s5 = peg$parseIdentifier()
              if (s5 === peg$FAILED) {
                s5 = peg$parseList()
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0
              s0 = peg$f4(s1, s5)
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseNumberField() {
        var s0, s1, s2, s3, s4, s5

        s0 = peg$currPos
        s1 = peg$parseNumberFields()
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c12
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e12)
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            s5 = peg$parseEqualityOperator()
            if (s5 === peg$FAILED) {
              s5 = peg$parseComparisonOperator()
              if (s5 === peg$FAILED) {
                s5 = peg$parseRange()
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0
              s0 = peg$f5(s1, s5)
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseComparisonOperator() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 60) {
          s1 = peg$c13
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e13)
          }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s1 = peg$c14
            peg$currPos++
          } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e14)
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c15) {
              s1 = peg$c15
              peg$currPos += 2
            } else {
              s1 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e15)
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c16) {
                s1 = peg$c16
                peg$currPos += 2
              } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$e16)
                }
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          s3 = peg$parseNumber()
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s0 = peg$f6(s1, s3)
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseEqualityOperator() {
        var s0, s1, s2, s3

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 61) {
          s1 = peg$c17
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e17)
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          s3 = peg$parseIdentifier()
          if (s3 === peg$FAILED) {
            s3 = peg$parseNumber()
            if (s3 === peg$FAILED) {
              s3 = peg$parseList()
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s0 = peg$f7(s1, s3)
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseRange() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        peg$silentFails++
        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c18
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e19)
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          s3 = peg$parseNumber()
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_()
            if (input.substr(peg$currPos, 2) === peg$c19) {
              s5 = peg$c19
              peg$currPos += 2
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e20)
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_()
              s7 = peg$parseNumber()
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_()
                if (input.charCodeAt(peg$currPos) === 93) {
                  s9 = peg$c20
                  peg$currPos++
                } else {
                  s9 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e21)
                  }
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s0
                  s0 = peg$f8(s3, s7)
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        peg$silentFails--
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e18)
          }
        }

        return s0
      }

      function peg$parseList() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

        s0 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c18
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e19)
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_()
          s3 = peg$parseIdentifier()
          if (s3 !== peg$FAILED) {
            s4 = []
            s5 = peg$currPos
            s6 = peg$parse_()
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c21
              peg$currPos++
            } else {
              s7 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e22)
              }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_()
              s9 = peg$parseIdentifier()
              if (s9 !== peg$FAILED) {
                s6 = [s6, s7, s8, s9]
                s5 = s6
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5)
              s5 = peg$currPos
              s6 = peg$parse_()
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c21
                peg$currPos++
              } else {
                s7 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$e22)
                }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_()
                s9 = peg$parseIdentifier()
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9]
                  s5 = s6
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            }
            s5 = peg$parse_()
            if (input.charCodeAt(peg$currPos) === 93) {
              s6 = peg$c20
              peg$currPos++
            } else {
              s6 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e21)
              }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0
              s0 = peg$f9(s3, s4)
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseNumber() {
        var s0, s1

        s0 = []
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e23)
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1)
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s1 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e23)
              }
            }
          }
        } else {
          s0 = peg$FAILED
        }

        return s0
      }

      function peg$parseIdentifier() {
        var s0, s1, s2

        s0 = peg$currPos
        s1 = []
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e24)
          }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2)
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s2 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$e24)
              }
            }
          }
        } else {
          s1 = peg$FAILED
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$f10(s1)
        }
        s0 = s1

        return s0
      }

      function peg$parse_() {
        var s0, s1

        peg$silentFails++
        s0 = []
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$e26)
          }
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1)
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$e26)
            }
          }
        }
        peg$silentFails--
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$e25)
        }

        return s0
      }

      peg$result = peg$startRuleFunction()

      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail(peg$endExpectation())
        }

        throw peg$buildStructuredError(
          peg$maxFailExpected,
          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
          peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
        )
      }
    }

    return {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse,
    }
  })()
